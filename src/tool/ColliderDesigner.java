/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tool;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author leonardo
 */
public class ColliderDesigner extends javax.swing.JFrame {

    private BufferedImage image;
    private List<Point> points = new ArrayList<Point>();
    
    /**
     * Creates new form ColliderDesigner
     */
    public ColliderDesigner() {
        initComponents();
        
        try {
            image = ImageIO.read(getClass().getResourceAsStream("/res/rockGrassDown.png"));
        } catch (IOException ex) {
            Logger.getLogger(ColliderDesigner.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        addMouseListener(new MouseHandler());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ColliderDesigner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ColliderDesigner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ColliderDesigner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ColliderDesigner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ColliderDesigner().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private Stroke stroke = new BasicStroke(2);
    private int offsetX = 50;
    private int offsetY = 50;
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        
        g2d.translate(offsetX, offsetY);
        g2d.drawRect(0, 0, getWidth(), getHeight());
        
        g2d.drawImage(image, 0, 0, null);
        
        g2d.setStroke(stroke);
        g2d.setColor(Color.RED);
        for (int i=0; i<points.size(); i++) {
            Point p1 = points.get(i);
            Point p2 = points.get((i + 1) % points.size());
            g2d.drawLine(p1.x, p1.y, p2.x, p2.y);
        }
        
    }

    private void printColliderGeneratedCode() {
        System.out.println("Polygon polygonCollider = new Polygon();");
        for (int i=0; i<points.size(); i++) {
            Point p = points.get(i);
            System.out.println("polygonCollider.addPoint(" + p.x + ", " + p.y + ");");
        }
    }
    
    private class MouseHandler extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            if (e.getButton() == 1) {
                points.add(new Point(e.getX() - offsetX, e.getY() - offsetY));
            }
            else if (e.getButton() == 3) {
                printColliderGeneratedCode();
            }
            repaint();
        }
        
    }
    
}
